{"version":3,"sources":["assets/bfs/bfs1.PNG","assets/bfs/bfs2.PNG","assets/bfs/bfs3.PNG","assets/bfs/bfs4.PNG","assets/dij/0.PNG","assets/dij/1.PNG","assets/dij/2.PNG","assets/dij/3.PNG","assets/dij/4.PNG","assets/dij/5.PNG","logo.svg","components/Nav.js","components/Dijkstra.js","data/InstructionData.js","components/Instructions.js","components/Grid.js","data/ContentData.js","data/BfsCode.js","components/Dropdown.js","components/Content.js","assets/visualize.gif","assets/wall.gif","components/Intro.js","App.js","reportWebVitals.js","index.js"],"names":["Nav","props","className","onClick","handleAddingWeights","handleVisualization","handleReset","get_min_index","nodes","min_index","min_dist","totaldist","i","length","isVisited","data","name","color","Instruction","Data","map","obj","index","style","background","id","WALL_COLOR","START_COLOR","END_COLOR","getRandomInt","min","max","Math","ceil","floor","random","Grid","state","grid","start_pos","end_pos","mousePressed","canClick","handleClick","bind","handleMouseDown","handleMouseEnter","handleMouseUp","visualize","resetGrid","addWeights","initial_grid","container","new_lst","j","dist","previous","push","makeGrid","this","setState","node","document","getElementById","classList","remove","result","unvisited","console","log","path_node","visited","curr_dist","neighbors","k","pop","shortest_path","path","curr","get_path","reverse","dijkstra","paths","setTimeout","indexes","add","addRandomDist","e","back_color","currentTarget","curr_grid","row","index1","index2","onMouseDown","onMouseUp","onMouseEnter","Component","ContentData","para","images","require","bfsCode","Dropdown","content","display","img","src","default","Content","Intro","wall_gif","alt","visualize_gif","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.adb33b9f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bfs1.fa68a65e.PNG\";","export default __webpack_public_path__ + \"static/media/bfs2.94b6c47d.PNG\";","export default __webpack_public_path__ + \"static/media/bfs3.33205fa2.PNG\";","export default __webpack_public_path__ + \"static/media/bfs4.237a1784.PNG\";","export default __webpack_public_path__ + \"static/media/0.bb6ebe8e.PNG\";","export default __webpack_public_path__ + \"static/media/1.959fe514.PNG\";","export default __webpack_public_path__ + \"static/media/2.e39e78ba.PNG\";","export default __webpack_public_path__ + \"static/media/3.54c754d8.PNG\";","export default __webpack_public_path__ + \"static/media/4.c0760f9f.PNG\";","export default __webpack_public_path__ + \"static/media/5.9eb28fc4.PNG\";","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import '../styles/Nav.css'\r\n\r\nexport default function Nav(props){\r\n    return(\r\n        <div className='nav-container'>\r\n            {/* <div className='algo'>Dijkstra's Algorithm</div> */}\r\n            <div onClick={props.handleAddingWeights}>Weights</div>\r\n            <div className='visualize-btn' onClick={props.handleVisualization}>Visualize</div>\r\n            <div className='reset-btn' onClick={props.handleReset}>Reset</div>\r\n        </div>\r\n    )\r\n}","const WALL_COLOR = 'black'\r\nconst START_COLOR = 'rgb(0, 51, 102)'\r\nconst END_COLOR = 'rgb(255, 185, 179)'\r\n\r\nexport default function dijkstra(grid){\r\n    let unvisited = []\r\n    console.log('in dijkstra')\r\n    // update colors base on grid \r\n    // skip if node is wall  \r\n    for (let i=0; i< grid.length; i++){\r\n        for (let j=0; j < grid[i].length; j++){\r\n            let node = document.getElementById(\"\"+i+\" \"+j)\r\n            grid[i][j].color = node.style.background\r\n            if (grid[i][j].color === START_COLOR){\r\n                grid[i][j].totaldist = 0\r\n            }\r\n            if (grid[i][j].color !== WALL_COLOR){\r\n                unvisited.push(grid[i][j])\r\n            }\r\n        }\r\n    }\r\n\r\n    let path_node = null \r\n    let visited = []\r\n    while(unvisited){\r\n        // find node with least total distance\r\n        let min_index = get_min_index(unvisited)\r\n        if(unvisited[min_index].totaldist === 999){\r\n            break\r\n        }\r\n        let i = unvisited[min_index].index[0]\r\n        let j = unvisited[min_index].index[1]\r\n        let node = document.getElementById(\"\"+i+\" \"+j)\r\n        // if (node.style.background === 'white'){\r\n        //     node.style.background='yellow'\r\n        // }\r\n        \r\n        let curr_dist = unvisited[min_index].totaldist\r\n        // Get its neighbors \r\n        let neighbors = []\r\n        if(i-1 >= 0){ neighbors.push(grid[i-1][j]) }\r\n        if(i+1 < grid.length){ neighbors.push(grid[i+1][j]) }\r\n        if(j-1 >= 0){ neighbors.push(grid[i][j-1]) }\r\n        if(j+1 < grid[0].length){ neighbors.push(grid[i][j+1]) }\r\n        // assign neighbors\r\n        for (let k=0; k < neighbors.length; k++){\r\n            if (!neighbors[k].isVisited && neighbors[k].totaldist > curr_dist+neighbors[k].dist+1){\r\n                neighbors[k].totaldist = curr_dist + neighbors[k].dist + 1\r\n                neighbors[k].previous = grid[i][j]\r\n            }\r\n            if (neighbors[k].color === END_COLOR){\r\n                visited.push(unvisited[min_index])\r\n                path_node = neighbors[k]\r\n                break\r\n            }\r\n        }\r\n        if (path_node !== null){ break }\r\n        // mark curr node as visited\r\n        unvisited[min_index].isVisited = true;\r\n        // swap and pop\r\n        [unvisited[min_index], unvisited[unvisited.length-1]] = [unvisited[unvisited.length-1], unvisited[min_index]]\r\n        visited.push(unvisited[unvisited.length-1])\r\n        unvisited.pop()\r\n    }\r\n    console.log(visited)\r\n    let shortest_path = get_path(path_node).reverse()\r\n    console.log(shortest_path)\r\n    return [visited, shortest_path]\r\n}\r\n\r\nfunction get_min_index(nodes){\r\n    let min_index = 0\r\n    let min_dist = nodes[0].totaldist\r\n    for (let i=0; i < nodes.length; i++){\r\n        if (!nodes[i].isVisited && nodes[i].totaldist < min_dist){\r\n            min_dist = nodes[i].totaldist\r\n            min_index = i\r\n        }\r\n    }\r\n    return min_index\r\n}\r\nfunction get_path(node){\r\n    let path = []\r\n    let curr = node\r\n    while (curr !== null){\r\n        path.push(curr.index)\r\n        curr = curr.previous\r\n    }\r\n    return path\r\n}","\r\n\r\nconst data=[\r\n    {\r\n        name: 'Wall',\r\n        color: 'black',\r\n    },\r\n    {\r\n        name: 'Start Node',\r\n        color: 'rgb(0, 51, 102)',\r\n    },\r\n    {\r\n        name: 'End Node',\r\n        color: 'rgb(255, 185, 179)',\r\n    },\r\n    {\r\n        name: 'Visited Node',\r\n        color: 'rgb(255, 249, 170)',\r\n    },\r\n    {\r\n        name: 'Shortest Path Node',\r\n        color: 'rgb(208, 240, 192)',\r\n    },\r\n]\r\n\r\nexport default data","import Data from '../data/InstructionData.js'\r\nimport '../styles/instructions.css'\r\n\r\nexport default function Instruction(){\r\n    return(\r\n        <div className='instruction-container'>\r\n            <div className='legend-container'>\r\n                {Data.map((obj, index) => (\r\n                    <div className='legend' key={'legend'+index}>\r\n                        <div style={{background: obj.color}} className='legend-color'/>\r\n                        <div className='legend-text'>{obj.name}</div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div id='text-container'>\r\n                <p>Click or hold down mouse button to make walls in the grid | \r\n                Click weight to add random cost | Click Visualize to start!</p>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}","import React, {Component} from 'react'\r\nimport '../styles/Grid.css'\r\nimport Nav from './Nav.js'\r\nimport dijkstra from './Dijkstra.js'\r\nimport Instructions from './Instructions.js'\r\n\r\nconst PATH_COLOR = 'rgb(255, 249, 170)'\r\nconst SUCCESS_COLOR = 'rgb(208, 240, 192)'\r\nconst WALL_COLOR = 'black'\r\nconst START_COLOR = 'rgb(0, 51, 102)'\r\nconst END_COLOR = 'rgb(255, 185, 179)'\r\n\r\nclass Grid extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            grid: [[]],\r\n            start_pos: [10, 10],\r\n            end_pos: [15, 20],\r\n            mousePressed: false,\r\n            canClick: true,\r\n        }\r\n        this.handleClick = this.handleClick.bind(this)\r\n        this.handleMouseDown = this.handleMouseDown.bind(this)\r\n        this.handleMouseEnter = this.handleMouseEnter.bind(this)\r\n        this.handleMouseUp = this.handleMouseUp.bind(this)\r\n        this.visualize = this.visualize.bind(this)\r\n        this.resetGrid = this.resetGrid.bind(this)\r\n        this.addWeights = this.addWeights.bind(this)\r\n    }\r\n\r\n    // make grid\r\n    componentDidMount(){\r\n        let initial_grid = makeGrid()\r\n        this.setState({grid: initial_grid})\r\n    }\r\n\r\n    visualize(){\r\n        if (!this.state.canClick){return}\r\n        //reset \r\n        let grid = this.state.grid\r\n        for (let i=0; i< grid.length; i++){\r\n            for (let j=0; j < grid[i].length; j++){\r\n                let node = document.getElementById(\"\"+i+\" \"+j)\r\n                let color = node.style.background\r\n                if (color !== END_COLOR && color !== START_COLOR && color !== WALL_COLOR){\r\n                    node.style.background = 'white'\r\n                }   \r\n                grid[i][j].isVisited = false\r\n                grid[i][j].previous = null\r\n                grid[i][j].totaldist = 999\r\n                node.classList.remove('visited')\r\n            }\r\n        }\r\n\r\n        // calc paths \r\n        let result = dijkstra(grid)\r\n        let paths = result[0]\r\n        let shortest_path = result[1]\r\n        // animate paths \r\n        this.setState({canClick: false})\r\n        for(let i=1; i <= paths.length; i++){\r\n            if (i===paths.length){\r\n                setTimeout(()=>{\r\n                    // if no shortest path\r\n                    if (shortest_path.length === 0){\r\n                        this.setState({canClick: true})\r\n                        return \r\n                    }\r\n                    // animate shortest path\r\n                    for(let j=1; j <= shortest_path.length-1; j++){\r\n                        setTimeout(()=>{\r\n                                if (j === shortest_path.length-1){\r\n                                    this.setState({canClick: true})\r\n                                }\r\n                                else{\r\n                                    let indexes = shortest_path[j]\r\n                                    let node = document.getElementById(\"\"+indexes[0]+\" \"+indexes[1])\r\n                                    node.style.background = SUCCESS_COLOR                                    \r\n                                }\r\n\r\n                        }, 50*j)\r\n                    }\r\n                }, 10*i)\r\n            }\r\n            else{\r\n                setTimeout(()=>{\r\n                    let indexes = paths[i].index\r\n                    let node = document.getElementById(\"\"+indexes[0]+\" \"+indexes[1])\r\n                    node.classList.add('visited')\r\n                    node.style.background = PATH_COLOR\r\n                }, 10 * i )\r\n            }\r\n        }\r\n    }\r\n\r\n    // reset everything \r\n    resetGrid(){\r\n        if (!this.state.canClick){return}\r\n        let grid = this.state.grid\r\n        for (let i=0; i< grid.length; i++){\r\n            for (let j=0; j < grid[i].length; j++){\r\n                let node = document.getElementById(\"\"+i+\" \"+j)\r\n                let color = node.style.background\r\n                if (color !== END_COLOR && color !== START_COLOR){\r\n                    node.style.background = 'white'\r\n                }   \r\n                grid[i][j].isVisited = false\r\n                grid[i][j].previous = null\r\n                grid[i][j].totaldist = 999\r\n                grid[i][j].dist = 0\r\n                node.classList.remove('visited')\r\n            }\r\n        }\r\n        this.setState(this.state)\r\n        \r\n    }\r\n\r\n    addWeights(){\r\n        if (!this.state.canClick){return}\r\n        addRandomDist(this.state.grid)\r\n        this.setState(this.state)\r\n    }\r\n\r\n    handleClick(e){\r\n        if (this.state.canClick){\r\n            let back_color = e.currentTarget.style.background\r\n            console.log('back_color:', back_color)\r\n            if (back_color !== END_COLOR && back_color !== START_COLOR){\r\n                if (back_color !== WALL_COLOR){\r\n                    e.currentTarget.style.background = WALL_COLOR\r\n                    e.currentTarget.classList.add('visited')\r\n                }\r\n                else{\r\n                    e.currentTarget.style.background = 'white' \r\n                    e.currentTarget.classList.remove('visited')\r\n                }\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    handleMouseDown(e){\r\n        if (this.state.canClick){\r\n            this.setState({mousePressed: true})\r\n        }\r\n    }\r\n    handleMouseEnter(e){\r\n        if (!this.state.mousePressed){return}\r\n        console.log('in')\r\n        let color = e.currentTarget.style.background\r\n        let mousePressed = this.state.mousePressed\r\n        if (mousePressed && color !== END_COLOR && color !== START_COLOR){\r\n            if (color === 'white') {e.currentTarget.classList.add('visited')}\r\n            else{e.currentTarget.classList.remove('visited')}\r\n            e.currentTarget.style.background = \r\n                color !==WALL_COLOR ? WALL_COLOR :\r\n                color ===WALL_COLOR ? 'white' : color\r\n        }\r\n    }\r\n    handleMouseUp(){\r\n        this.setState({mousePressed: false})\r\n    }\r\n    \r\n    render(){\r\n        let curr_grid = this.state.grid\r\n        return(\r\n            <div className='flex-container'>\r\n                <Nav handleVisualization={this.visualize} \r\n                    handleReset={this.resetGrid}\r\n                    handleAddingWeights={this.addWeights}\r\n                />\r\n                <Instructions />\r\n                <div className='grid-container'>\r\n                    {\r\n                        curr_grid.map((row, index1) => (\r\n                            row.map((i, index2) => {\r\n                                return (\r\n                                    <div \r\n                                        key={''+index1+''+index2} \r\n                                        index1={index1}\r\n                                        index2={index2}\r\n                                        id={`${index1} ${index2}`}\r\n                                        className='cell'\r\n                                        style={{background: i.color}}\r\n                                        onClick={(e) => this.handleClick(e)}\r\n                                        onMouseDown={(e) => this.handleMouseDown(e)}\r\n                                        onMouseUp={this.handleMouseUp}\r\n                                        onMouseEnter={this.handleMouseEnter}\r\n                                    >\r\n                                        {i.dist > 0 ? i.dist : ''}\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        ))\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction makeGrid(){\r\n    let container = []\r\n    for (let i = 0; i < 25; i++){\r\n        let new_lst = []\r\n        for (let j=0; j < 40; j++){\r\n            let data = {\r\n                totaldist: 999, \r\n                dist: 0, \r\n                previous: null,\r\n                index: [i, j],\r\n                isVisited: false,\r\n                color: 'white'\r\n            }\r\n            new_lst.push(data)\r\n        }\r\n        container.push(new_lst)\r\n    }\r\n    container[10][10].color = START_COLOR\r\n    container[20][30].color = END_COLOR\r\n    return container\r\n}\r\n\r\n// https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nfunction addRandomDist(grid){\r\n    for (let i=0; i < grid.length; i++){\r\n        for (let j=0; j < grid[i].length; j++){\r\n            if (grid[i][j].color !== END_COLOR && grid[i][j].color !== START_COLOR){\r\n                grid[i][j].dist = getRandomInt(1, 9)\r\n            }\r\n            \r\n        }\r\n    }\r\n}\r\n\r\nexport default Grid","\r\nconst ContentData = [\r\n    {\r\n        name: \"Beadth-First Search (BFS)\",\r\n        para: 'Tree search algorithm that assumes the cost between each node is the same. \\\r\n            This algorithm can also be used to find taget nodes or destinations. Example Pseudocode:\\\r\n            ',\r\n        images: [require('../assets/bfs/bfs1.PNG'), require('../assets/bfs/bfs2.PNG'), \r\n                require('../assets/bfs/bfs3.PNG'), require('../assets/bfs/bfs4.PNG')],\r\n    },\r\n    {\r\n       name: \"Dijkstra's Algorithm\",\r\n       para: 'Like BFS, but takes cost into account. The algorithm can be used to find the \\\r\n                shortest path to each node or a target node. For a better understanding of the \\\r\n                algorithm check out: https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-greedy-algo-7/',\r\n       images: [require('../assets/dij/0.PNG'), require('../assets/dij/1.PNG'),\r\n                require('../assets/dij/2.PNG'), require('../assets/dij/3.PNG'),\r\n                require('../assets/dij/4.PNG'), require('../assets/dij/5.PNG')],\r\n    },\r\n]\r\n\r\nexport default ContentData","import './BfsCode.css'\r\n\r\nexport default function bfsCode(){\r\n    return(\r\n        <p>\r\n            - queue = [] <br/>\r\n            - queue.append(RootNode) <br/>\r\n            - while(queue): <br/>\r\n            -    curr = queue.dequeue() <br/>\r\n            -    # add it's neighbors <br/>\r\n            -    for i in curr.neighbors: <br/>\r\n            -        # check if neighbor is target and br/eak if found <br/>\r\n            -        if i == target: br/eak out of for loop and while loop  <br/>\r\n            -        # if not then add to queue <br/>\r\n            -        queue.append(i) <br/>\r\n        </p>\r\n    )\r\n}\r\n","import React, {Component} from 'react'\r\nimport '../styles/Dropdown.css'\r\nimport BfsCode from '../data/BfsCode.js'\r\n\r\nclass Dropdown extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            content: [],\r\n        }\r\n        this.handleClick = this.handleClick.bind(this)\r\n    }\r\n\r\n    // toggle display between none and flex\r\n    handleClick(index){\r\n        console.log('clicked')\r\n        let node = document.getElementById('dropdown'+index)\r\n        if (node.style.display !=='none' && node.style.display){\r\n            node.style.display ='none'\r\n        }\r\n        else{\r\n            node.style.display = 'flex'\r\n        }\r\n\r\n    }\r\n    render(){\r\n        return(\r\n            <div className='dropdown-container'>\r\n                <div className='dropdown-box1'\r\n                onClick={() => this.handleClick(this.props.index)}>\r\n                    <div className='dropdown-name'>\r\n                        {this.props.name}\r\n                    </div>\r\n                </div>\r\n                <div className='dropdown-box2' id={'dropdown'+this.props.index}>\r\n                    <div className='dropdown-para'>\r\n                        {this.props.para}    \r\n                    </div>\r\n                    <div className='dropdown-code'>\r\n                        {this.props.name === 'Beadth-First Search (BFS)' ? \r\n                            <BfsCode />\r\n                            : \r\n                            <p></p>\r\n                        }\r\n                    </div>\r\n                    <div className='dropdown-images'>\r\n                        {this.props.images.map((img, index) => {\r\n                            return(\r\n                                <img key={'img'+index} src={img.default} className='img'/>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Dropdown","import React, {Component} from 'react'\r\nimport ContentData from '../data/ContentData.js'\r\nimport Dropdown from './Dropdown.js'\r\n\r\n\r\nclass Content extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            data: ContentData,\r\n        }\r\n    }\r\n\r\n    render(){\r\n        console.log(this.state.data)\r\n        return(\r\n            <div className='content-container'>\r\n                {this.state.data.map((obj, index) =>(\r\n                    <Dropdown \r\n                        key={index} \r\n                        name={obj.name} \r\n                        para={obj.para}\r\n                        index={index}\r\n                        images={obj.images}\r\n                    />\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default Content","export default __webpack_public_path__ + \"static/media/visualize.0737a09d.gif\";","export default __webpack_public_path__ + \"static/media/wall.5ec7aa4f.gif\";","import React from 'react'\r\nimport visualize_gif from '../assets/visualize.gif'\r\nimport wall_gif from '../assets/wall.gif'\r\nimport '../styles/Intro.css'\r\n\r\nfunction Intro(){\r\n    return(\r\n        <div className='intro-container'>\r\n            <h1>Find the Shortest Path</h1>\r\n            <h2>Click to make WALLS</h2>\r\n            <img src={wall_gif} alt=\"walls...\" />\r\n            <h2>Click VISUALIZE to see shortest path</h2>\r\n            <img src={visualize_gif} alt=\"walls...\" />\r\n            <h2>Click WEIGHTS to add a cost for each box</h2>\r\n            <h3>We will find the path to the target with the least cost</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Intro","import logo from './logo.svg';\nimport './App.css';\nimport Grid from './components/Grid.js'\nimport Content from './components/Content.js'\nimport Intro from './components/Intro.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Intro />\n      <Content />\n      <Grid />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}